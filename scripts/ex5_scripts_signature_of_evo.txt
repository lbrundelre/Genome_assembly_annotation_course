srun --cpus-per-task=1 --mem-per-cpu=3G --time=05:00:00 --pty bash


The dynamic evolution of duplicate genes
1. Prepare input files
module load UHTS/Analysis/SeqKit/0.13.2

## 1) Prepare input files
# Keep only Arabidopsis longest gene models (Tagged as Cvi_00000000-RA) -> once for flye, once for canu

# flye
grep -e "ID=Cvi_[0-9]*\-RA" flye/pilon.maker.output/pilon.all.maker.annotated.proteins.gff > gene_duplication/flye/pilon.all.maker.annotated.proteins-RA.gff

#canu
grep -e "ID=Cvi_[0-9]*\-RA" canu/pilon.maker.output/pilon.all.maker.annotated.proteins.gff > gene_duplication/canu/pilon.all.maker.annotated.proteins-RA.gff

# flye
seqkit grep -n -r -p \-RA flye/pilon.maker.output/pilon.all.maker.annotated.proteins.fasta -o gene_duplication/flye/pilon.all.maker.annotated.proteins-RA.fasta

# canu
seqkit grep -n -r -p \-RA canu/pilon.maker.output/pilon.all.maker.annotated.proteins.fasta -o gene_duplication/canu/pilon.all.maker.annotated.proteins-RA.fasta


# Reformat gff file
# filter gff lines with mRNA position
# flye
grep -P "\tmRNA\t" pilon.all.maker.annotated.proteins-RA.gff > pilon.all.maker.annotated.proteins-mRNA.gff
# canu
grep -P "\tmRNA\t" pilon.all.maker.annotated.proteins-RA.gff > pilon.all.maker.annotated.proteins-mRNA.gff

# Shorten ID once for flye and once for canu
sed 's/ID\=//' pilon.all.maker.annotated.proteins-mRNA.gff > pilon.all.maker.annotated.proteins-shortID_temp.gff
sed 's/\-RA\;.*/\-RA/' pilon.all.maker.annotated.proteins-shortID_temp.gff > pilon.all.maker.annotated.proteins-shortID.gff
rm pilon.all.maker.annotated.proteins-shortID_temp.gff
# select columns 1,4,5,9 and rearrange them
awk -F'\t' -v OFS="\t" '{ print $1, $9, $4, $5}' pilon.all.maker.annotated.proteins-shortID.gff > pilon.all.maker.annotated.proteins_final.gff

# Create softlink to outgroup species
ln -s /data/courses/assembly-annotation-course/CDS_annotation/NNU_mRNA_single_model.gff NNU_mRNA_single_model.gff
ln -s /data/courses/assembly-annotation-course/CDS_annotation/NNU.pep.fa.ref.single_model NNU.pep.fa.ref.single_model

# Merge files for flye and canu
cat pilon.all.maker.annotated.proteins_final.gff ../NNU_mRNA_single_model.gff > Cvi_NNU.gff
cat pilon.all.maker.annotated.proteins-RA.fasta ../NNU.pep.fa.ref.single_model > Cvi_NNU.fasta

# Blast (sbatch)
#!/usr/bin/env bash

#SBATCH --time=03:00:00
#SBATCH --mem=30G
#SBATCH --cpus-per-task=10
#SBATCH --job-name=Blast_outgroup
#SBATCH --mail-user=livbrundel@gmail.com
#SBATCH --mail-type=fail,end
#SBATCH --output=/data/users/lbrun/assembly_annotation_course/annotation/protein_coding_seq/automatic_annotation/Blast_outgroup_%j.o
#SBATCH --error=/data/users/lbrun/assembly_annotation_course/annotation/protein_coding_seq/automatic_annotation/Blast_outgroup_%j.e

# Define paths to directories once for flye and once for canu
WORKDIR=/data/users/lbrun/assembly_annotation_course/annotation/protein_coding_seq/automatic_annotation/gene_duplication

# Load Module
module load Blast/ncbi-blast/2.9.0+

# Go to working directory
cd $WORKDIR

# Create blast db 1x for outgroup, 1x for flye and 1x for canu --> comment out creation of outgroup database when doing it the second time!
makeblastdb -in NNU.pep.fa.ref.single_model -dbtype prot -out blast_db/NNU

makeblastdb -in flye/pilon.all.maker.annotated.proteins-RA.fasta -dbtype prot -out flye/blast_db/Cvi
makeblastdb -in canu/pilon.all.maker.annotated.proteins-RA.fasta -dbtype prot -out canu/blast_db/Cvi

# Run blastp for flye and canu -> once against NNU and once against itself
blastp -query flye/pilon.all.maker.annotated.proteins-RA.fasta -db blast_db/NNU -num_threads 10 -evalue 1e-10 -max_target_seqs 5 -outfmt 6 > flye/Cvi_NNU.blast
blastp -query flye/pilon.all.maker.annotated.proteins-RA.fasta -db flye/blast_db/Cvi -num_threads 10 -evalue 1e-10 -max_target_seqs 5 -outfmt 6 > flye/Cvi.blast

blastp -query canu/pilon.all.maker.annotated.proteins-RA.fasta -db blast_db/NNU -num_threads 10 -evalue 1e-10 -max_target_seqs 5 -outfmt 6 > canu/Cvi_NNU.blast
blastp -query canu/pilon.all.maker.annotated.proteins-RA.fasta -db canu/blast_db/Cvi -num_threads 10 -evalue 1e-10 -max_target_seqs 5 -outfmt 6 > canu/Cvi.blast


2. Run DupGen_finder
# Install DupGene in home directory
cd ~/software  # or any directory of your choice
git clone https://github.com/qiao-xin/DupGen_finder.git
cd DupGen_finder
make
chmod 775 DupGen_finder.pl
chmod 775 DupGen_finder-unique.pl
chmod 775 set_PATH.sh
source set_PATH.sh # macht dass es Programm bzw. dessen Commands Ã¼berall erkennt 

# Make new directories and move files there
cd /data/users/lbrun/assembly_annotation_course/annotation/protein_coding_seq/automatic_annotation/gene_duplication/flye
mkdir DupGenfinder_input DupGenfinder_output
cp pilon.all.maker.annotated.proteins_final.gff Cvi.blast Cvi_NNU.gff Cvi_NNU.blast DupGenfinder_input/.
cd DupGenfinder_input
mv pilon.all.maker.annotated.proteins_final.gff Cvi.gff
cd ../../canu
mkdir DupGenfinder_input DupGenfinder_output
cp pilon.all.maker.annotated.proteins_final.gff Cvi.blast Cvi_NNU.gff Cvi_NNU.blast DupGenfinder_input/.
cd DupGenfinder_input
mv pilon.all.maker.annotated.proteins_final.gff Cvi.gff

# Run in srun for flye and canu --> wenn files richtig benannt sind, sollte es checken
DupGen_finder.pl -i DupGenfinder_input -t Cvi -c NNU -o DupGenfinder_output

cd DupGenfinder_output

Estimate genome duplication events -> Run for flye and genome with srun
1. 
module load UHTS/Analysis/SeqKit/0.13.2
cut -f 1 Cvi.wgd.genes > ID.txt # create a list of sequences to subset
seqkit grep -f ID.txt  /data/users/lbrun/assembly_annotation_course/annotation/protein_coding_seq/automatic_annotation/flye/pilon.maker.output/pilon.all.maker.transcripts.fasta -o Cvi.wgd.genes.fa
seqkit translate Cvi.wgd.genes.fa -o Cvi.wgd.genes.fa.proteins
sed -i 's/_frame=1/_p/' Cvi.wgd.genes.fa.proteins # modify ID of protein sequences

2. 
cut -f 1,3 Cvi.wgd.pairs > wgd_pairs.csv
sed -i 's/RA/RA_p/g' wgd_pairs.csv

3. 
mkdir genome_dup_events
cp wgd_pairs.csv Cvi.wgd.genes.fa Cvi.wgd.genes.fa.proteins genome_dup_events/.
cd genome_dup_events

4.
scripts=/data/courses/assembly-annotation-course/CDS_annotation/scripts #define path to scripts as variable
$scripts/split_flat Cvi.wgd.genes.fa
$scripts/split_flat Cvi.wgd.genes.fa.proteins

5.
module add Emboss/EMBOSS/6.6.0
$scripts/bestflash_from_list wgd_pairs.csv

6. 
$scripts/pair_to_CDS_paml_pair Cvi pair

7.
module load Phylogeny/paml/4.9j
$scripts/PAML_yn00_from_CDS_pair Cvi > PAML_yn00_results

cp PAML_yn00_results ../.

cd ../


Calculate average Ks value for each syntenic block
1. 
awk '{print($1,$1,$6,$7,$5)}' PAML_yn00_results|sed 's/ /\t/g'|sed 's/__x__/\t/'|sed 's/_p//g'|cut -f 1,2,4,5,6|sed 's/dN=//'|sed 's/dS=//'|sed 's/omega=//'|awk '$4<5' > Cvi.wgd.kaks

2.
perl $scripts/add_ka_ks_to_collinearity_file.pl Cvi

3.
perl $scripts/compute_ks_for_synteny_blocks.pl Cvi.collinearity.kaks

4. Bruacht python 2
python $scripts/plot_syntenic_blocks_ks_distri.py Cvi.synteny.blocks.ks.info 2 Cvi